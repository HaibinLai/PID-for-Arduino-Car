.TH "Controller.c" 3 "Version 1.0.1" "PID for Arduino-based Car" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Controller.c
.SH SYNOPSIS
.br
.PP
\fR#include <Arduino\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <avr/wdt\&.h>\fP
.br
\fR#include <MsTimer2\&.h>\fP
.br
\fR#include <avr/power\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLOW_SPEED\fP   210"
.br
.ti -1c
.RI "#define \fBHIGH_SPEED_LOW_DRAG\fP   80"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBLow_Speed\fP ()"
.br
.ti -1c
.RI "void \fBsetup\fP ()"
.br
.ti -1c
.RI "void \fBGet_sensor_status\fP ()"
.br
.ti -1c
.RI "void \fBcalculate_pid\fP ()"
.br
.ti -1c
.RI "void \fBUpdate_Speed\fP ()"
.br
.ti -1c
.RI "void \fBloop\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const int \fBRight_SensorB\fP = 3"
.br
.ti -1c
.RI "const int \fBRight_SensorA\fP = 2"
.br
.ti -1c
.RI "const int \fBMiddle_Sensor\fP = 10"
.br
.ti -1c
.RI "const int \fBLeft_SensorA\fP = 11"
.br
.ti -1c
.RI "const int \fBLeft_SensorB\fP = 13"
.br
.ti -1c
.RI "const int \fBRight_Back_Wheel\fP = 6"
.br
.ti -1c
.RI "const int \fBRight_Front_Wheel\fP = 7"
.br
.ti -1c
.RI "const int \fBLeft_Back_Wheel\fP = 4"
.br
.ti -1c
.RI "const int \fBLeft_Front_Wheel\fP = 5"
.br
.ti -1c
.RI "const int \fBLOWER\fP = 220"
.br
.ti -1c
.RI "const int \fBHIGHER\fP = 130"
.br
.ti -1c
.RI "const int \fBTRANS\fP = 140"
.br
.ti -1c
.RI "const int \fBDASH\fP = 100"
.br
.ti -1c
.RI "const int \fBDEL\fP = 30"
.br
.ti -1c
.RI "int \fBcursor_speed\fP = 100"
.br
.ti -1c
.RI "int \fBrr\fP = 0"
.br
.ti -1c
.RI "int \fBrm\fP = 0"
.br
.ti -1c
.RI "int \fBmd\fP = 0"
.br
.ti -1c
.RI "int \fBlm\fP = 0"
.br
.ti -1c
.RI "int \fBll\fP = 0"
.br
.ti -1c
.RI "int \fBlast_dir\fP = 1"
.br
.ti -1c
.RI "int \fBcurrent_status\fP = 0"
.br
.ti -1c
.RI "int \fBmax_speed\fP = 30"
.br
.ti -1c
.RI "float \fBP\fP = 0"
.br
.ti -1c
.RI "float \fBI\fP = 0"
.br
.ti -1c
.RI "float \fBI_angular\fP = 0"
.br
.ti -1c
.RI "int \fBcounter\fP = 0"
.br
.ti -1c
.RI "float \fBD\fP = 0"
.br
.ti -1c
.RI "float \fBPID\fP = 0"
.br
.ti -1c
.RI "const float \fBKp\fP = 6"
.br
.ti -1c
.RI "const float \fBKi\fP = 0\&.08"
.br
.ti -1c
.RI "const float \fBKd\fP = 0\&.05"
.br
.ti -1c
.RI "float \fBprevious_status\fP = 0"
.br
.ti -1c
.RI "float \fBPID_value\fP = 0"
.br
.ti -1c
.RI "int \fBgo_stright_value\fP = 100"
.br
.ti -1c
.RI "int \fBturn_right_value\fP = 0"
.br
.ti -1c
.RI "int \fBturn_left_value\fP = 0"
.br
.ti -1c
.RI "int \fBLeft_wheel_speed\fP = 0"
.br
.ti -1c
.RI "int \fBRight_wheel_speed\fP = 0"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void Get_sensor_status ()\fR [inline]\fP"
判断I/O口传感器信号状态,白色为0，黑色为1 
.SS "void Low_Speed ()"

.PD 0
.IP "\(bu" 1
Low drag
.PP
.PD 0
.IP "\(bu" 1
This function takes turn the clock down;
.PP
\fBReturns\fP
.RS 4
MsTimer2::stop() 
.RE
.PP

.SS "void setup ()"
Wheel Motor Setup
.PP
Sensor I/O setup
.SH "Variable Documentation"
.PP 
.SS "int rr = 0"
variable 
.SH "Author"
.PP 
Generated automatically by Doxygen for PID for Arduino-based Car from the source code\&.
